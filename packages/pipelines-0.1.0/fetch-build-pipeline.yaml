apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: fetch-build
spec:
  description: |
    The pipeline takes a git repository, git revision and
    a docker dockerfile and context than builds an image and tests it.
  params:
  - name: repo-url
    type: string
    description: The git repository URL to clone from.
  - name: git-rev
    type: string
    description: The git rev to clone, e.g. branch name, tag, ...
  - name: dockerfile 
    description: Path to the Dockerfile to build. 
    default: ./Dockerfile 
  - name: context 
    description: Path to the directory to use as docker context. 
    default: . 
  - name: build_extra_args 
    description: Extra parameters passed for the docker build command when building images. 
    default: ""
  - name: base-name
    description: Reference of the image docker will produce. 
  workspaces:
  - name: shared-data
    description: |
      This workspace will receive the cloned git repo and be passed
      to the next Task for the repo's README.md file to be read.
  tasks:
  - name: fetch-repo
    taskRef:
      name: git-clone
    workspaces:
    - name: output
      workspace: shared-data
    params:
    - name: url
      value: $(params.repo-url)
    - name: revision
      value: $(params.git-rev)
  - name: get-dep-image-name
    runAfter: ["fetch-repo"]  # Wait until the clone is done before reading the readme.
    params:
    - name: base-name 
      value: $(params.base-name)
    workspaces:
    - name: source
      workspace: shared-data
    taskSpec:
      params:
      - name: base-name 
      results:
      - name: dep-image-name
        description: The image name containing build dependencies
      workspaces:
      - name: source
      steps:
      - image: alpine
        script: |
          #!/bin/sh -e
          apk update && apk add perl-utils
          export HASH=$(shasum -a 256 $(workspaces.source.path)/Cargo.lock | cut -d ' ' -f 1)
          echo -n registry.vfeld.net/vfeld/$(params.base-name):build_deps_$HASH | tee $(results.dep-image-name.path)
  - name: build-dep-image
    runAfter: ["get-dep-image-name"]
    taskRef:
      name: dind-build
    workspaces:
    - name: source
      workspace: shared-data
    params: 
    - name: image 
      value: $(tasks.get-dep-image-name.results.dep-image-name)
    - name: dockerfile 
      value: $(params.dockerfile)
    - name: context 
      value: $(params.context)
    - name: build_extra_args 
      value: "--target depbuilder"
  - name: get-test-image-name
    runAfter: ["build-dep-image"]
    params:
    - name: base-name 
      value: $(params.base-name)
    - name: git-rev 
      value: $(params.git-rev)
    workspaces:
    - name: source
      workspace: shared-data
    taskSpec:
      params:
      - name: base-name 
      - name: git-rev 
      results:
      - name: test-image-name
        description: The image name containing test binaries
      workspaces:
      - name: source
      steps:
      - image: alpine
        script: |
          #!/bin/sh -e
          echo -n registry.vfeld.net/vfeld/$(params.base-name):unittest_$(params.git-rev) | tee $(results.test-image-name.path)
  - name: build-test-image
    runAfter: ["get-test-image-name"]
    taskRef:
      name: dind-build
    workspaces:
    - name: source
      workspace: shared-data
    params: 
    - name: image 
      value: $(tasks.get-test-image-name.results.test-image-name)
    - name: dockerfile 
      value: $(params.dockerfile)
    - name: context 
      value: $(params.context)
    - name: build_extra_args 
      value: "--target test"
  - name: app-unittest
    runAfter: ["build-test-image"]
    taskRef:
      name: schocken-auth-server-test
    workspaces:
    - name: source
      workspace: shared-data
    params: 
    - name: image 
      value: $(tasks.get-test-image-name.results.test-image-name)
